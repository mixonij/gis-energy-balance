// <auto-generated />
using System;
using Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace Ispu.Gis.EnergyBalances.Infrastructure.Migrations
{
    [DbContext(typeof(CityEnergyModelingContext))]
    partial class CityEnergyModelingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "tiger", "postgis_tiger_geocoder");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "topology", "postgis_topology");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id")
                        .HasColumnOrder(1);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id")
                        .HasColumnOrder(2);

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Polygon,4326)")
                        .HasColumnName("geometry")
                        .HasColumnOrder(3);

                    b.HasKey("Id")
                        .HasName("buildings_pkey");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex(new[] { "Id" }, "IX_buildings_id");

                    b.ToTable("buildings", (string)null);
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.BuildingsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int?>("BuiltYear")
                        .HasColumnType("integer");

                    b.Property<int>("ResidentsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId")
                        .IsUnique();

                    b.ToTable("BuildingsInfo");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("MinZoom")
                        .HasColumnType("integer")
                        .HasColumnName("min_zoom")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("name_native")
                        .HasColumnOrder(3)
                        .HasDefaultValueSql("''::text");

                    b.Property<NpgsqlPoint>("NorthWestPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("point")
                        .HasColumnName("north_west_point")
                        .HasColumnOrder(4)
                        .HasDefaultValueSql("'(0,0)'::point");

                    b.Property<NpgsqlPoint>("SouthEastPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("point")
                        .HasColumnName("south_east_point")
                        .HasColumnOrder(5)
                        .HasDefaultValueSql("'(0,0)'::point");

                    b.HasKey("Id")
                        .HasName("cities_pkey");

                    b.ToTable("cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MinZoom = 11,
                            Name = "Ivanovo",
                            NativeName = "Иваново",
                            NorthWestPoint = new NpgsqlTypes.NpgsqlPoint(57.093009000000002, 40.661774000000001),
                            SouthEastPoint = new NpgsqlTypes.NpgsqlPoint(56.903770999999999, 41.307220000000001)
                        });
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.CityDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id")
                        .HasColumnOrder(1);

                    b.Property<Polygon>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry(Polygon,4326)")
                        .HasColumnName("geometry")
                        .HasColumnOrder(2);

                    b.HasKey("Id")
                        .HasName("areas_pkey");

                    b.HasIndex("CityId");

                    b.ToTable("city_districts", (string)null);
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.HeatingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<NpgsqlPoint>("Coords")
                        .HasColumnType("point");

                    b.Property<float>("NominalPower")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("HeatingStation");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.Building", b =>
                {
                    b.HasOne("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.City", "City")
                        .WithMany("Buildings")
                        .HasForeignKey("CityId");

                    b.HasOne("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.CityDistrict", "CityDistrict")
                        .WithMany("Buildings")
                        .HasForeignKey("DistrictId");

                    b.Navigation("City");

                    b.Navigation("CityDistrict");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.BuildingsInfo", b =>
                {
                    b.HasOne("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.Building", "Building")
                        .WithOne("BuildingInfo")
                        .HasForeignKey("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.BuildingsInfo", "BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.CityDistrict", b =>
                {
                    b.HasOne("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.City", "City")
                        .WithMany("CityDistricts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.HeatingStation", b =>
                {
                    b.HasOne("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.City", "City")
                        .WithMany("HeatingStations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.Building", b =>
                {
                    b.Navigation("BuildingInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.City", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("CityDistricts");

                    b.Navigation("HeatingStations");
                });

            modelBuilder.Entity("Ispu.Gis.EnergyBalances.Infrastructure.Persistence.Entities.CityDistrict", b =>
                {
                    b.Navigation("Buildings");
                });
#pragma warning restore 612, 618
        }
    }
}
